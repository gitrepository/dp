###-###
RTB013:
com.ch03
FIX: DECORATOR PATTERN - class pattern
The decorator pattern attaches additional responsibility to an object dynamically.
Decorator pattern provides flexible alternative to sub classing for extending functionality.


###-###
RTB012:
com.ch03
FIX: Adding place holders in the abstract class for various products
-and have a basic cost() implementation that takes all the above products 
-into consideration.

ISSUE: If a coffee type needed a new product, existing code (abstract class)
-will have to change.
For some coffee types (like decaf) some of the product types (hasWhip) makes no sense.
Customer has double mocha will cause cost() calc issue.


###-###
RTB011:
com.ch03
ISSUE: Starbuzz added lot of different coffee types. Class explosion.
As each class coffee class was computing it's cost, each different coffee type
-had it's own class to compute the cost.
Maintenance nightmare, if cost of products (milk, powder, etc..) change, 
-would cause the code to change across all the classes.


###-###
RTB010:
com.ch03
CASE STUDY: Implement Starbuzz billing system.
Each type of coffee (DarkRoast, Decaf etc) have a discription &
-cost associated with it.
