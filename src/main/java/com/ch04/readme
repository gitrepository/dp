###-###
RTB019:
com.ch04
FIX: ABSTRACT FACTORY PATTERN
Abstract Factory pattern provides an interface for creating a family related 
-or dependent classes without specifying their concrete classes.

Abstract Factory pattern created objects using Composition rather than inheritance.
(DP- prefer composition over inheritance).
If we have to create related objects, we use Abstract Factory pattern. This would 
-create a whole set of related objects rather than just one type (factory method).

The client (StoreNYCPizza)  composes FactoryNYCPizzaIngredients to get the ability to create 
-various products (cheese/sauce/clams etc).


###-###
RTB018:
com.ch04
FIX: FACTORY METHOD PATTERN
Factory Method Pattern defines an interface for creating object, but lets subclass to
-decide which class to instantiate.
Factory method defer instantiation to subclasses.

Factory Method uses INHERITANCE to create objects.
Factory Method uses Classes to create objects.
Factory Method as the name says has just a method which generates a factory of products.

Here we have two different franchises (NYC & Chicago). 
They way pizzas, for instance are created in NYC & Chicago are different.
Thus these differences are best handles by creating these pizzas locally (NYC/Chicago stores)
-rather than at the main store (ShopPizza).

We have achieved localized create process by applying factory method pattern where in 
-the instantiation is delegated to the subclass.

Classes that are NOT most likely to change can be instantiated.
Classes that are likely to change, it is better not depend on the concrete class as far as possible, 
-should use patterns like Factory Method to encapsulate that change.

CONCERN: Pizza creation becomes more detailed. We need more groups of ingredients (cheese, dough, crust etc..) factories.
Need a way to create different ingredients localized way.


###-###
RTB017:
com.ch04
FIX: Multiple Simple Factories defined.
To cater to various franchises, we have various factories respectively.

ISSUE: Localized changes with respect to franchises makes the code more fragile.
DP - code is not closed for modification.
Need a better way to handle encapsulate similar object creation.


###-###
RTB016:
com.ch04
FIX: Simple Factory defined. 
Encapsulate the varying part, that way any changes to the varying part
-(FctorySimplePizza) is not directly effecting the class that uses it (PizzaStore).
Also it would be a single point of change when there are other classes that are dependent of it(FctorySimplePizza)

ISSUE: Franchise (NYC and Chicago branches);


###-###
RTB015:
com.ch04
CASE STUDY: Simple Pizza Store.
This simple pizza store creates a variety of pizzas like cheese, pepperoni etc.
PizzaStore class handles the creation of different Pizzas.

ISSUE: Upon addition/deletion of pizza types the code modification is needed.
PizzaStore point of view - Code should be open for extension and closed for modification (is violated)
