###-###
RTB030:
com.ch08
Simple Caffeine Beverage Example
ISSUE: Duplication of common steps.

###-###
RTB029:
com.ch07_2
Home Theater implementation
FIX: FACADE PATTERN - Facade pattern provides a unified interface to a set of interfaces in subsystem.

###-###
RTB028:
com.ch07_2
Home Theater implementation
ISSUE: Simple task (watch a movie) results in dealing with a lot of subsystem interfaces. 

###-###
RTB027:
com.ch07_1
DP - Principle of Least Knowledge

###-###
RTB026:
com.ch07
ADAPTER PATTERN - Real World example - Enumeration/Iterator.

###-###
RTB025:
com.ch07
ADAPTER PATTERN - Converts one interface of classes into another interface that the client expects.

###-###
RTB024:
com.ch06
COMMAND PATTERN - Remote Control implementation + undo functionality w/ state

###-###
RTB023:
com.ch06
COMMAND PATTERN - Remote Control implementation + undo functionality

###-###
RTB022:
com.ch06
COMMAND PATTERN - Remote Control implementation + more functionality

###-###
RTB021:
com.ch06
COMMAND PATTERN - Simple Remote Control implementation

###-###
RTB020:
com.ch05
SINGLETON PATTERN

###-###
RTB019:
com.ch04
FIX: ABSTRACT FACTORY PATTERN

###-###
RTB018:
com.ch04
FIX: FACTORY METHOD PATTERN
CONCERN: Pizza creation becomes more detailed. Need more ingredient (cheese, dough, crust etc..) factories. 

###-###
RTB017:
com.ch04
FIX: Multiple Simple Factories defined.
ISSUE: Localized changes, with the way the pizza is created, with respect to franchise will cause issue.

###-###
RTB016:
com.ch04
FIX: Simple Factory defined. Encapsulate the varying part (creation)
ISSUE: Franchise.

###-###
RTB015:
com.ch04
CASE STUDY: Simple Pizza store
ISSUE: Object creation code makes it open for modification in future.

###-###
RTB015:
com.ch04
CASE STUDY: Simple Pizza store
ISSUE: Object creation code makes it open for modification in future.

###-###
RTB014:
com.ch03
DECORATOR PATTERN - Code

###-###
RTB013:
com.ch03
FIX: DECORATOR PATTERN - Class diagram

###-###
RTB012:
com.ch03
FIX: Add place holders to abstract class. Cost() impl in the abstract class.
ISSUE: Partial fix. Existing Code change up on new product addition.

###-###
RTB011:
com.ch03
ISSUE: Starbuzz added lot of different coffee types. Class explosion.

###-###
RTB010:
com.ch03
CASE STUDY: Implement Starbuzz billing system.

###-###
RTB009:
com.ch02
Observer Pattern - Weather Station example

###-###
RTB008:
com.ch02
PARRTEN - Observer Pattern - class diagram

###-###
RTB007:
com.ch02
PARRTEN - Observer Pattern

###-###
RTB006:
com.ch01
SOLUTION #3: PARRTEN - Strategy Pattern

###-###
RTB005:
com.ch01
SOLUTION #2: Create Interface for changing functionality (fly/quack) 

###-###
RTB004:
com.ch01
SOLUTION #1: Override the fly functionality 

###-###
RTB003:
com.ch01
PROBLEM: Rubber ducks can now fly.

###-###
RTB002:
com.ch01
Fly functionality to Duck

###-###
RTB001:
com.ch01
Simple Duck bird class implementation.