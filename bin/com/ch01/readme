###-###
RTB006:
com.ch01
SOLUTION #3: Separate varying part from the non varying part. Encapsulate it.

Behaviors (fly & quack) are separated out and encapsulated.
Each behavior and has an interface (to program against) and different implementations of it.

/Duck/ composes (HAS A) the different behaviors rather than inheriting them thus giving more flexibility.
-as design principle states - prefer composition (HAS A) over inheritance (extends).

Composition gives the scope for runtime modification of the composed reference provided
-it follows proper interface implementation.


###-###
RTB005:
com.ch01
SOLUTION #2: Create Interface for changing functionality (fly/quack)
This solves the problem of overriding the fly/quack functionality
-as not all duck class will have to implement the fly/quack interface 
-and thus got rid of overriding the fly/quack functionality (prev issue).

ISSUE: But we have a new issue.
All the duck subclasses that can fly/quack implementing this interface will be duplicating the same code.
Moreover, there could be different implementations of quack functionality (like quack/squeak etc) 
-and we loose the flexibility.

Interfacing out the changing functionality is also NOT the solution.


###-###
RTB004:
com.ch01
SOLUTION #1: Overriding fly functionality in the sub class could solve the issue.
All the non flyable ducks will have this function do nothing.
ISSUE: Every duck that shouldn't fly should have this function overridden
-Any new duck (Wooden Decoy Duck) implementation should have the inherited functions changed accordingly.
Inheritance is NOT the solution.


###-###
RTB003:
com.ch01
PROBLEM: Inheritance gave Rubber duck the ability to fly.
As the super class (Duck) has been modified to have additional fly functionality,
-the rubber duck can now fly which shouldn't be the case.


###-###
RTB002:
com.ch01
Fly functionality to Duck. 
Now the generic Duck can fly as well.
Added fly functionality to it.


###-###
RTB001:
Simple Duck bird class implementation.
Refer to fig01